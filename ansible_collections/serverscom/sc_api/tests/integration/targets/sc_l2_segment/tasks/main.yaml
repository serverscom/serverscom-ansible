---
- name: Check if there are sc_token and sc_endpoint variables
  no_log: true
  fail:
    msg: 'You need to define sc_token and sc_endpoint variables in tests/integration/integration_config.yml'
  when: not sc_endpoint or not sc_token

- name: Test invalid token
  sc_l2_segment:
    token: invalid
    endpoint: '{{ sc_endpoint }}'
    name: foo
    state: absent
  register: test1
  failed_when:
    - test1 is success
    - sc_endpoint not in test1.api_url
    - test1.status_code != 401

- name: Test2, Delete non-existing segment by id
  sc_l2_segment:
    token: '{{ sc_token }}'
    endpoint: '{{ sc_endpoint }}'
    segment_id: '{{ non_existing_id }}'  # any valid but absent ID is good
    state: absent
  register: test2

- name: Check Test2
  assert:
    that:
      - test2 is not changed

- name: Test3, Delete non-existing segment by name
  sc_l2_segment:
    token: '{{ sc_token }}'
    endpoint: '{{ sc_endpoint }}'
    name: nonexisting
    state: absent
  register: test3

- name: Check Test3
  assert:
    that:
      - test2 is not changed


# Clean L2 segments with test servers as members
- name: Get all L2 segments list
  serverscom.sc_api.sc_l2_segments_info:
    token: "{{ sc_token }}"
    endpoint: '{{ sc_endpoint }}'
  register: all_l2_segments

- name: Get full info of all the L2 segments
  serverscom.sc_api.sc_l2_segment_info:
    token: "{{ sc_token }}"
    id: "{{ item.id }}"
  loop: "{{ all_l2_segments.l2_segments }}"
  register: sc_l2_segments_full_info

- name: Initialize matched list
  set_fact:
    matched_segments: []

- name: Collect segments with test members
  set_fact:
    matched_segments: "{{ matched_segments + [item] }}"
  loop: "{{ sc_l2_segments_full_info.results }}"
  when: item.l2_segment.members
        | selectattr('id', 'in', [existing_server1_id, existing_server2_id, existing_server3_id])
        | list
        | length > 0

- name: Remove segments with test members
  sc_l2_segment:
    token: '{{ sc_token }}'
    endpoint: '{{ sc_endpoint }}'
    name: "{{ item.l2_segment.name }}"
    state: absent
    type: private
  loop: "{{ matched_segments }}"
  loop_control:
    label: "{{ item.l2_segment.name }}"

- block:
    - name: Test4, Create segment in check mode
      sc_l2_segment:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
        name: integration-test
        state: present
        type: private
        members:
          - id: '{{ existing_server1_id }}'
            mode: native
          - id: '{{ existing_server2_id }}'
            mode: native
          - id: '{{ existing_server3_id }}'
            mode: native
      check_mode: true
      register: test4
      loop:
        - 1
        - 2

    - name: Check Test4
      assert:
        that:
          - test4 is changed
          - test4.results[0].location_group_id == test4.results[1].location_group_id
          - test4.results[0].location_group_id > 0

- block:
    - name: Test5, Create public segment for real
      sc_l2_segment:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
        name: integration-test
        state: present
        type: private
        members:
          - id: '{{ existing_server1_id }}'
            mode: native
          - id: '{{ existing_server2_id }}'
            mode: native
          - id: '{{ existing_server3_id }}'
            mode: native
        labels:
          test_label: "test_value"
      register: test5
      tags: create

    - name: Check Test5
      assert:
        that:
          - test5 is changed
          - test5.name == 'integration-test'
          - test5.id
          - test5.type == 'private'
          - test5.status == 'active'
          - test5.labels.test_label == 'test_value'

    - name: Test5a, Create public segment for real second time (idempotence)
      sc_l2_segment:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
        name: integration-test
        state: present
        type: private
        members:
          - id: '{{ existing_server1_id }}'
            mode: native
          - id: '{{ existing_server2_id }}'
            mode: native
          - id: '{{ existing_server3_id }}'
            mode: native
        labels:
          test_label: "test_value"
      register: test5a

    - name: Check Test5a
      assert:
        that:
          - test5a is not changed
          - test5a.name == 'integration-test'
          - test5a.id == test5.id
          - test5a.type == 'private'
          - test5a.status == 'active'
          - test5.labels.test_label == 'test_value'

    - name: Test6, Delete public segment in check mode
      sc_l2_segment:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
        name: integration-test
        state: absent
        type: private
      check_mode: true
      register: test6

    - name: Check Test6
      assert:
        that:
          - test6 is changed

    - name: Test7, Switch server type from native to trunk in check mode
      sc_l2_segment:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
        name: integration-test
        state: present
        type: private
        members:
          - id: '{{ existing_server1_id }}'
            mode: native
          - id: '{{ existing_server2_id }}'
            mode: trunk
          - id: '{{ existing_server3_id }}'
            mode: native
      check_mode: true
      register: test7

    - name: Check Test7
      assert:
        that:
          - test7 is changed
          - "test7.members_added == [{'id': existing_server2_id, 'mode': 'trunk'}]"
          - "test7.members_removed == [{'id': existing_server2_id, 'mode': 'native'}]"

    - name: Test8, Switch server type from native to trunk
      sc_l2_segment:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
        name: integration-test
        state: present
        type: private
        members:
          - id: '{{ existing_server1_id }}'
            mode: native
          - id: '{{ existing_server2_id }}'
            mode: trunk
          - id: '{{ existing_server3_id }}'
            mode: native
      register: test8
    - name: Check Test8
      assert:
        that:
          - test8 is changed
          - "test8.members_added == [{'id': existing_server2_id, 'mode': 'trunk'}]"
          - "test8.members_removed == [{'id': existing_server2_id, 'mode': 'native'}]"
          - "test8.members_kept|length == 2"

    - name: Test9, Use member_absent
      sc_l2_segment:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
        name: integration-test
        state: present
        type: private
        members_absent:
          - id: '{{ existing_server2_id }}'
      register: test9
    - name: Assert test9
      assert:
        that:
          - test9 is changed
          - test9.members_removed|length == 1
          - test9.members_kept|length == 2
      tags: assert9

    - name: Try to use sc_l2_segments_info
      sc_l2_segments_info:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
      register: segments

    - name: Test sc_l2_segments_info module
      assert:
        that:
          - |
            '"name": "integration-test"' in segments|to_json

    - name: Try to use sc_l2_segment_info by id
      sc_l2_segment_info:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
        id: '{{  test5.id }}'
      register: segment_by_id

    - name: Check output by_id
      assert:
        that:
          - segment_by_id is not changed
          - segment_by_id.l2_segment.name == 'integration-test'
          - segment_by_id.l2_segment.id  == test5.id
          - segment_by_id.l2_segment.members|length == 2
          - segment_by_id.l2_segment.networks == []
          - segment_by_id.l2_segment.status == 'active'

    - name: Try to use sc_l2_segment_info by name
      sc_l2_segment_info:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
        name: integration-test
      register: segment_by_name

    - name: Check output by_name
      assert:
        that:
          - segment_by_name is not changed
          - segment_by_name.l2_segment.name == 'integration-test'
          - segment_by_name.l2_segment.id  == test5.id
          - segment_by_name.l2_segment.members|length == 2
          - segment_by_name.l2_segment.networks == []
          - segment_by_name.l2_segment.status == 'active'

  always:
    - name: Test10 and cleanup, Delete public segment for real
      sc_l2_segment:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
        name: integration-test
        state: absent
        type: private
      register: test10
    - name: Check Test10
      assert:
        that:
          - test10 is changed
          - test10.id == test5.id
