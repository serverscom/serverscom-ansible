---
- name: Check if there are sc_token and sc_endpoint variables
  no_log: true
  fail:
    msg: 'You need to define sc_token and sc_endpoint variables in tests/integration/integration_config.yml'
  when: not sc_endpoint or not sc_token

- name: Test invalid token
  sc_baremetal_servers_info:
    token: invalid
    endpoint: '{{ sc_endpoint }}'
  register: test1
  failed_when:
    - test1 is success

- name: Test2, Retrive list of servers
  sc_baremetal_servers_info:
    token: '{{ sc_token }}'
    endpoint: '{{ sc_endpoint }}'
  register: test2

- name: Check Test2
  assert:
    that:
      - test2 is not changed
      - test2.baremetal_servers|length > 0
      - test2.baremetal_servers[0].configuration
      - test2.baremetal_servers[0].id
      - test2.baremetal_servers[0].location_code
      - test2.baremetal_servers[0].location_id
      - test2.baremetal_servers[0].operational_status
      - test2.baremetal_servers[0].private_ipv4_address
      - test2.baremetal_servers[0].public_ipv4_address
      - test2.baremetal_servers[0].title
      - test2.baremetal_servers[0].type

- block:
    - name: PUT test label
      uri:
        url: "{{ sc_endpoint }}/hosts/dedicated_servers/{{ item }}"
        method: PUT
        headers:
          Authorization: "Bearer {{ sc_token }}"
          Content-Type: "application/json"
        body:
          labels:
            test_label: "test_value"
        body_format: json
        status_code: 200
      loop:
        - "{{ existing_server1_id }}"
        - "{{ existing_server2_id }}"
        - "{{ existing_server3_id }}"


    - name: Test3, Retrive list of servers by label
      sc_baremetal_servers_info:
        token: '{{ sc_token }}'
        endpoint: '{{ sc_endpoint }}'
        label_selector: "test_label==test_value"
      register: test3

    - name: Check Test3
      assert:
        that:
          - test3 is not changed
          - test3.baremetal_servers|length > 0
          - test3.baremetal_servers[0].configuration
          - test3.baremetal_servers[0].id
          - test3.baremetal_servers[0].location_code
          - test3.baremetal_servers[0].location_id
          - test3.baremetal_servers[0].operational_status
          - test3.baremetal_servers[0].private_ipv4_address
          - test3.baremetal_servers[0].public_ipv4_address
          - test3.baremetal_servers[0].title
          - test3.baremetal_servers[0].type
        fail_msg: "Test server not found by label"

  always:
    - name: Remove test label
      uri:
        url: "{{ sc_endpoint }}/hosts/dedicated_servers/{{ item }}"
        method: PUT
        headers:
          Authorization: "Bearer {{ sc_token }}"
          Content-Type: "application/json"
        body:
          labels: {}
        body_format: json
        status_code: 200
      loop:
        - "{{ existing_server1_id }}"
        - "{{ existing_server2_id }}"
        - "{{ existing_server3_id }}"

- name: Test4, Retrive list of servers by type
  sc_baremetal_servers_info:
    token: '{{ sc_token }}'
    endpoint: '{{ sc_endpoint }}'
    type: "dedicated_server"
  register: test4

- name: Check Test4
  assert:
    that:
      - test4.baremetal_servers | map(attribute='type') | unique == ['dedicated_server']
    fail_msg: "One or more servers are not of type 'dedicated_server'"
    success_msg: "All servers are of type 'dedicated_server'"
