---
- name: Check if there are sc_token and sc_endpoint variables
  no_log: true
  fail:
    msg: "You need to define sc_token and sc_endpoint variables in tests/integration/integration_config.yml"
  when: not sc_endpoint or not sc_token

- name: Test1 invalid token
  sc_cloud_computing_instance:
    token: invalid
    endpoint: "{{ sc_endpoint }}"
    instance_id: noID
    state: absent
  register: test1
  failed_when:
    - test1 is success
    - sc_endpoint not in test1.api_url
    - test1.status_code != 401

- name: Test2, state=absent of absent instance by id
  sc_cloud_computing_instance:
    token: "{{ sc_token }}"
    endpoint: "{{ sc_endpoint }}"
    instance_id: dQKnqxAR
    state: absent
  register: test2

- name: Check Test2
  assert:
    that:
      - test2 is not changed

- name: Test2a, state=absent of absent instance by id in a region
  sc_cloud_computing_instance:
    token: "{{ sc_token }}"
    endpoint: "{{ sc_endpoint }}"
    instance_id: dQKnqxAR
    region_code: NL03
    state: absent
  register: test2a
  failed_when: test2a is changed
  tags:
    - test2a

- name: Test3, state=absent for absent instance by name
  sc_cloud_computing_instance:
    token: "{{ sc_token }}"
    endpoint: "{{ sc_endpoint }}"
    name: 603838e8-e844-11ea-a4e0-7f7652cefc07
    state: absent
  register: test3

- name: Check test3
  assert:
    that:
      - test3 is not changed

- name: Test4, state=absent for absent instance by name with wrong region
  sc_cloud_computing_instance:
    token: "{{ sc_token }}"
    endpoint: "{{ sc_endpoint }}"
    name: 603838e8-e844-11ea-a4e0-7f7652cefc08
    region_id: 4242424242
    state: absent
  register: test4

- name: Check test4
  assert:
    that:
      - test4 is not changed

- name: Test prep, get region id
  sc_cloud_computing_regions_info:
    token: "{{ sc_token }}"
    endpoint: "{{ sc_endpoint }}"
  register: regions
  tags: always

- name: Tests prep, Get image id
  sc_cloud_computing_images_info:
    token: "{{ sc_token }}"
    endpoint: "{{ sc_endpoint }}"
    region_id: "{{ regions.regions[0].id }}"
  register: img_info
  tags: always

- name: Tests prep, Get flavor id
  sc_cloud_computing_flavors_info:
    token: "{{ sc_token }}"
    endpoint: "{{ sc_endpoint }}"
    region_id: "{{ regions.regions[0].id }}"
  register: flavor_info
  tags: always

- name: Test5, create absent instance in check_mode
  block:
    - name: Test5, create instance in check mode
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: present
        region_id: "{{ regions.regions[0].id }}"
        flavor_id: '{{ (flavor_info.cloud_flavors|sort(attribute="disk"))[0].id }}'
        image_id: "{{ img_info.cloud_images[0].id }}"
        name: ec354674-e844-11ea-ac53-83e1244f3049
        backup_copies: 0
        gpn: true
        ipv6: true
      check_mode: true
      register: test5

    - name: Test5, get list of instances
      sc_cloud_computing_instances_info:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
      register: test5_instances

    - name: Check test5
      assert:
        that:
          - test5 is changed
          - "'ec354674-e844-11ea-ac53-83e1244f3049' not in test5_instances|to_json"

  always:
    - name: Test5 Cleanup
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: absent
        name: ec354674-e844-11ea-ac53-83e1244f3049
        wait: 600
        update_interval: 5

- name: Test6, normal state=present/state=absent testsuite with wait
  block:
    - name: Test6, create instance with wait
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: present
        region_id: "{{ regions.regions[0].id }}"
        flavor_id: '{{ (flavor_info.cloud_flavors|sort(attribute="disk"))[0].id }}'
        image_id: "{{ img_info.cloud_images[0].id }}"
        name: 52310c60-7446-482d-a30e-2bedeb515878
        backup_copies: 0
        gpn: true
        ipv6: true
        wait: 600
        update_interval: 5
      register: test6

    - name: Test6, get list of instances
      sc_cloud_computing_instances_info:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
      register: test6_instances

    - name: Check test6
      assert:
        that:
          - test6 is changed
          - "'52310c60-7446-482d-a30e-2bedeb515878' in test6_instances|to_json"
          - test6.status == 'ACTIVE'
          - test6.name == '52310c60-7446-482d-a30e-2bedeb515878'

    - name: Test6, create the same instance second time
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: present
        region_id: "{{ regions.regions[0].id }}"
        flavor_id: '{{ (flavor_info.cloud_flavors|sort(attribute="disk"))[0].id }}'
        image_id: "{{ img_info.cloud_images[0].id }}"
        name: 52310c60-7446-482d-a30e-2bedeb515878
        backup_copies: 0
        gpn: true
        ipv6: true
        wait: 600
        update_interval: 5
      register: test6_second

    - name: Test6, create the same instance third time in check_mode
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: present
        region_id: "{{ regions.regions[0].id }}"
        flavor_id: '{{ (flavor_info.cloud_flavors|sort(attribute="disk"))[0].id }}'
        image_id: "{{ img_info.cloud_images[0].id }}"
        name: 52310c60-7446-482d-a30e-2bedeb515878
        backup_copies: 0
        gpn: true
        ipv6: true
        wait: 600
        update_interval: 5
      check_mode: true
      register: test6_third

    - name: check Test6 second and third
      assert:
        that:
          - test6_second is not changed
          - test6_second.id == test6.id
          - test6_second.name == '52310c60-7446-482d-a30e-2bedeb515878'
          - test6_third is not changed
          - test6_third.id == test6.id
          - test6_third.name == '52310c60-7446-482d-a30e-2bedeb515878'

  always:
    - name: Test6 Cleanup
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: absent
        name: 52310c60-7446-482d-a30e-2bedeb515878
        wait: 600
        update_interval: 5

- name: Test7, state=present without wait, state=absent with conflict wait
  block:
    - name: Test7, create instance without wait
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: present
        region_id: "{{ regions.regions[0].id }}"
        flavor_id: '{{ (flavor_info.cloud_flavors|sort(attribute="disk"))[0].id }}'
        image_id: "{{ img_info.cloud_images[0].id }}"
        name: c4edd55c-8a79-4181-b880-917b8ee5cdf2
        backup_copies: 0
        gpn: false
        ipv6: false
        wait: 0
      register: test7

    - name: Test7, get list of instances
      sc_cloud_computing_instances_info:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
      register: test7_instances

    - name: Check Test7
      assert:
        that:
          - test7 is changed
          - test7.status != 'ACTIVE'
          - test7.name == 'c4edd55c-8a79-4181-b880-917b8ee5cdf2'
          - "'c4edd55c-8a79-4181-b880-917b8ee5cdf2' in test7_instances|to_json"

    - name: Test7, try to delete non-active instance without retry_on_conflicts
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: absent
        name: c4edd55c-8a79-4181-b880-917b8ee5cdf2
        retry_on_conflicts: false
      register: test7_conflict
      failed_when: false

    - name: Check Test7, after conflict
      assert:
        that:
          - test7_conflict.status_code == 409

    - name: Test7, try to delete non-active instance in check_mode
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: absent
        name: c4edd55c-8a79-4181-b880-917b8ee5cdf2
      check_mode: true
      register: test7_delete_check_mode

    - name: Test7, get list of instances after check_mode delete
      sc_cloud_computing_instances_info:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
      register: test7_instances_check_mode_delete

    - name: Check Test7 after check_mode delete
      assert:
        that:
          - test7_delete_check_mode is changed
          - "'c4edd55c-8a79-4181-b880-917b8ee5cdf2' in test7_instances_check_mode_delete|to_json"

    - name: Test7, try to delete instance
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: absent
        name: c4edd55c-8a79-4181-b880-917b8ee5cdf2
        wait: 600
        update_interval: 5
      register: test7_delete

    - name: Test7, get list of instances after delete
      sc_cloud_computing_instances_info:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
      register: test7_instances_after_delete

    - name: Check Test7, after delete
      assert:
        that:
          - test7_delete is changed
          - "'c4edd55c-8a79-4181-b880-917b8ee5cdf2' not in test7_instances_after_delete"

  always:
    - name: Test7 Cleanup
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: absent
        name: c4edd55c-8a79-4181-b880-917b8ee5cdf2
        wait: 600
        update_interval: 5

- name: Test8 Invalid flavor/image
  block:
    - name: Test8, invalid flavor_name
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: present
        name: 15a0688b-44f6-41e2-971c-4e860c402373
        region_id: "{{ regions.regions[0].id }}"
        flavor_name: "dont.exist"
        image_id: "{{ img_info.cloud_images[0].id }}"
      register: test8_flavor
      failed_when: false

    - name: Test8, invalid image_regexp
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: present
        name: 15a0688b-44f6-41e2-971c-4e860c402373
        region_id: "{{ regions.regions[0].id }}"
        flavor_id: '{{ (flavor_info.cloud_flavors|sort(attribute="disk"))[0].id }}'
        image_regexp: a.+dont.exist
      register: test8_image
      failed_when: false

    - name: Check test 8
      assert:
        that:
          - "'Unable to find flavor by name dont.exist' in test8_flavor.msg"
          - "'Unable to find image by regexp a.+dont.exist' in test8_image.msg"

  always:
    - name: Test8, cleanup
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: absent
        name: 15a0688b-44f6-41e2-971c-4e860c402373
        wait: 600

- name: Test9 image by regexp, flavor by name and region_code
  tags:
    - test9
  block:
    - name: Test9 create instanace with image by regexp and flavor by name
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: present
        name: 8d2779e6-eb72-11ea-970f-733ca983e4ca
        region_code: NL03
        flavor_name: "SSD.30"
        image_regexp: "Ubuntu.+"
      register: test9_create
    - name: Test9, delete instance by id
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        instance_id: "{{ test9_create.id }}"
        wait: 600
        state: absent
      register: test9_delete

    - name: Check test9
      assert:
        that:
          - test9_create is changed
          - test9_delete is changed
          - test9_create.name == '8d2779e6-eb72-11ea-970f-733ca983e4ca'
          - test9_delete.name == '8d2779e6-eb72-11ea-970f-733ca983e4ca'

  always:
    - name: Test9, cleanup
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: absent
        name: 8d2779e6-eb72-11ea-970f-733ca983e4ca

- name: Test10, use of GP only with userdata
  tags: [test10]
  block:
    - name: Test10 preparation, register a new key
      sc_ssh_key:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        public_key: '{{ lookup("file", "key1.pub") }}'
        name: 95f41cea-00fc-11ed-bfa8-33691f518c37
        state: present
      register: test10_key
    - name: Test10 create instanace with GP only and custom userdata
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: present
        name: d1b69136-00ed-11ed-a8dc-dbb69a235481
        region_id: "{{ regions.regions[0].id }}"
        gpn: true
        ipv4: false
        flavor_name: "SSD.30"
        image_regexp: "Ubuntu.+"
        ssh_key_name: 95f41cea-00fc-11ed-bfa8-33691f518c37
        user_data: |
          #cloud-config
          apt:
            preserve_sources_list: false
            primary:
              - arches: [default]
                uri: http://mirror.servers.com/ubuntu
            security:
              - arches: [default]
                uri: http://mirror.servers.com/ubuntu
      register: test10

    - name: Check test10
      assert:
        that:
          - test10 is changed
          - test10 is changed
          - test10.gpn_enabled
          - test10.private_ipv4_address
          - not test10.public_ipv4_address
          - test10.name == 'd1b69136-00ed-11ed-a8dc-dbb69a235481'

  always:
    - name: Test10, cleanup
      sc_cloud_computing_instance:
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: absent
        name: d1b69136-00ed-11ed-a8dc-dbb69a235481
    - name: clean ssh key
      sc_ssh_key:
        name: 95f41cea-00fc-11ed-bfa8-33691f518c37
        token: "{{ sc_token }}"
        endpoint: "{{ sc_endpoint }}"
        state: absent

- name: Test11, check illegal region_code
  tags: test11
  sc_cloud_computing_instance:
    token: "{{ sc_token }}"
    endpoint: "{{ sc_endpoint }}"
    state: present
    region_code: BADCODE
    flavor_id: '{{ (flavor_info.cloud_flavors|sort(attribute="disk"))[0].id }}'
    image_id: "{{ img_info.cloud_images[0].id }}"
    name: ec354674-e844-11ea-ac53-83e1244f3049
  register: test11
  failed_when: "'Cloud region with code BADCODE is not found' not in test11.msg"
